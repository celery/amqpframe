"""
amqpframe.methods
~~~~~~~~~~~~~~~~~

Implementation of AMQP methods.

This file was generated {{ gendate }} from
{{ gensource }}.

"""

import collections

from . import types


class Method:
    """Base class for all AMQP methods."""

    def __init__(self, *values):
        assert len(values) == len(self.field_info)

        self.values = collections.OrderedDict()
        for (name, amqptype), value in zip(self.field_info, values):
            self.values[name] = amqptype(value)

    @classmethod
    def from_bytestream(cls, stream):
        # Unpacking method type, spec 2.3.5.1 Method Frames
        class_id = types.UnsignedShort.from_bytestream(stream)
        method_id = types.UnsignedShort.from_bytestream(stream)
        method_cls = METHODS[(class_id, method_id)]

        values = []
        number_of_bits = 0
        for amqptype in method_cls.field_info.values():
            if amqptype is types.Bool:
                number_of_bits += 1
                continue
            elif number_of_bits:
                # We have some bools but this next field is not a bool
                bits = types.Bool.many_from_bytestream(stream, number_of_bits)
                values.extend(bits)
                number_of_bits = 0

            values.append(amqptype.from_bytestream(stream))

        if number_of_bits:
            bits = types.Bool.many_from_bytestream(stream, number_of_bits)
            values.extend(bits)
        return method_cls(*values)

    def to_bytestream(self, stream):
        # Packing method type, spec 2.3.5.1 Method Frames
        types.UnsignedShort(self.method_type[0]).to_bytestream(stream)
        types.UnsignedShort(self.method_type[1]).to_bytestream(stream)
        bits = []
        for value in self.values.values():
            if isinstance(value, types.Bool):
                bits.append(value.value)
            else:
                if bits:
                    types.Bool.many_to_bytestream(bits, stream)
                    bits = []
                value.to_bytestream(stream)

        if bits:
            types.Bool.many_to_bytestream(bits, stream)

    def __getattr__(self, name):
        try:
            return self.fields[name]
        except KeyError:
            raise AttributeError('{} object has no attribute {}'.format(
                type(self).__name__, name
            )) from None

    def __eq__(self, other):
        return (self.method_type == other.method_type and
                self.values == other.values)


{% for name, doc, type, fields, synchronous in methods %}
class {{ name }}(Method):
    """{{ doc }}
    """
    method_type = {{ type }}

{% if not fields %}
    field_info = ()
{% else %}
    field_info = (
{% for name, type in fields.items() %}
        ("{{ name }}", types.{{ type }}),
{% endfor %}
    )
{% endif %}

    synchronous = {{ synchronous }}
{% if fields %}

    def __init__(self,
{% for name in fields.keys() %}
{% if not loop.last %}
                 {{ name if name != 'global' else 'global_' }},
{% else %}
                 {{ name if name != 'global' else 'global_' }}):
{% endif %}
{% endfor %}
        super().__init__(
{% for name in fields.keys() %}
             {{ name if name != 'global' else 'global_' }},
{% endfor %}
        )
{% endif %}


{% endfor %}
# Method type -> class dispatch table
METHODS = {
{% for name, _, type, _, _ in methods %}
    {{ type }}: {{ name }},
{% endfor %}
}
