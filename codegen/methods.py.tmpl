"""
amqpframe.methods
~~~~~~~~~~~~~~~~~

Implementation of AMQP methods.

This file was generated {{ gendate }} from
{{ gensource }}.

"""
# There are a lot of reserved_* attributes, they are unused intentionally.
# Disable "too many lines" too, for obvious reasons.
# Some arguments may shadow builtins, we don't care - methods are data classes.
# pylint: disable=unused-variable,too-many-lines,redefined-builtin

import io
import collections

from . import types
# TODO: find a better way to do this
# pylint: disable=invalid-name,protected-access
_recursive_equals = types._recursive_equals
# pylint: enable=invalid-name,protected-access


class Method:
    """Base class for all AMQP methods."""

    def __init__(self, *values):
        assert len(values) == len(self.field_info)

        self.values = collections.OrderedDict()
        for (name, amqptype), value in zip(self.field_info, values):
            if value is None:
                value = amqptype()
            else:
                value = amqptype(value)
            self.values[name] = value

    @classmethod
    def from_bytestream(cls, stream: io.BytesIO, body_chunk_size=None):
        """Instantiates a `Method` subclass from the byte stream.

        Which subclass' instance should be instantiated is determined
        according to the specification, 2.3.5.1.
        """

        class_id = types.UnsignedShort.from_bytestream(stream)
        method_id = types.UnsignedShort.from_bytestream(stream)
        method_cls = METHODS[(class_id.value, method_id.value)]

        kwargs = {}
        bit_names = []
        number_of_bits = 0
        for name, amqptype in method_cls.field_info:
            if name == 'global':
                name = 'global_'

            if amqptype is types.Bool:
                number_of_bits += 1
                bit_names.append(name)
                continue
            elif number_of_bits:
                # We have some bools but this next field is not a bool
                bits = types.Bool.many_from_bytestream(stream, number_of_bits)
                for bit_name, bit in zip(bit_names, bits):
                    kwargs[bit_name] = bit
                number_of_bits = 0
                bit_names.clear()

            kwargs[name] = amqptype.from_bytestream(stream)

        if number_of_bits:
            bits = types.Bool.many_from_bytestream(stream, number_of_bits)
            for name, bit in zip(bit_names, bits):
                kwargs[name] = bit
            number_of_bits = 0
            bit_names.clear()
        return method_cls(**kwargs)

    def to_bytestream(self, stream: io.BytesIO):
        """Serialize the method into the byte stream according to
        the specification, 2.3.5.1.
        """

        types.UnsignedShort(self.method_type[0]).to_bytestream(stream)
        types.UnsignedShort(self.method_type[1]).to_bytestream(stream)
        bits = []
        for value in self.values.values():
            if isinstance(value, types.Bool):
                bits.append(value.value)
            else:
                if bits:
                    types.Bool.many_to_bytestream(bits, stream)
                    bits = []
                value.to_bytestream(stream)

        if bits:
            types.Bool.many_to_bytestream(bits, stream)

    def __getattr__(self, name):
        try:
            return self.values[name]
        except KeyError:
            raise AttributeError('{} object has no attribute {}'.format(
                type(self).__name__, name
            )) from None

    def __eq__(self, other):
        return (self.method_type == other.method_type and
                _recursive_equals(self.values, other.values))

    def __repr__(self):
        return '<{}: {}>'.format(self.__class__.__name__,
                                 ' '.join('{}={}'.format(k, v)
                                          for k, v in self.values.items()))


{% for name, doc, type, fields, synchronous in methods %}
class {{ name }}(Method):
    """{{ doc }}
    """
    method_type = {{ type }}

{% if not fields %}
    field_info = ()
{% else %}
    field_info = (
{% for name, type in fields.items() %}
        ("{{ name }}", types.{{ type }}),
{% endfor %}
    )
{% endif %}

    synchronous = {{ synchronous }}
{% if fields %}

    def __init__(self, *,
{% for name in fields.keys() %}
{% set name = name if name != 'global' else 'global_' %}
{% set default_value = '=None' if name.startswith('reserved') else '' %}
{% if not loop.last %}
                 {{ name }}{{ default_value }},
{% else %}
                 {{ name }}{{ default_value }}):
{% endif %}
{% endfor %}
        super().__init__(
{% for name, type in fields.items() %}
{% if not name.startswith('reserved') %}
            {{ name if name != 'global' else 'global_' }},
{% else %}
            types.{{ type }}(),
{% endif %}
{% endfor %}
        )
{% endif %}


{% endfor %}
# Method type -> class dispatch table
METHODS = {
{% for name, _, type, _, _ in methods %}
    {{ type }}: {{ name }},
{% endfor %}
}

